#lang scribble/manual

@(require "../literacy.rkt")

@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@handbook-root-story{常见疑问}

本章所涉及的问题都比较常见和典型，
相信有此疑问的人一定已经自己做过很多功课。
但我还是想强调一句，编程对学生和家长来说都是比较新颖的技能，
零基础的这两个群体其实没有太大差别。
因此，请家长保持谦逊，花点耐心来认真思考我的回答。

@handbook-scenario{如何选择程序语言？}

@tag:TLDR

这个问题本身不应该不存，因为很少有人会只用一种程序语言。

@tag:deep

计算机系本科必修语言包括 C++ 和 Java；
有追求的学生(比如想当黑客了)还应该会 C、Lisp、Python 等诸多不同风格的语言；
特别的，想做数学研究的学生还会接触更多普通人闻所未闻的语言。

本科毕业之后大致有两条线，研究生深造(含硕士和博士)和软件行业就职。
这时候你大概率没得选，导师、领导会直接指定你用什么语言。
所以，@racketresultfont{不用奇怪，会多门程序语言既非困难、更非了不得的事。}

@handbook-action[#:tag "how_to_first"]{如何选择第一门程序语言？}

@tag:TLDR

如果只是在少儿编程市场里选，学生其实压根没得选，
只有 C++ 和 Python 两个选项。
因此，长话短说，Python 适合想快速上手的学生；
C++ 适合想在专业性上走得远的学生。
特别是，如果你的目标是信息学奥赛，那只能选 C++。

@tag:deep

当谈到“学编程”的时候，至少要考虑两个目的：
学会这个系列的课程/技能；将它用作谋生的工具。
这两个目标内在联系紧密，外在差异也可能很明显。
比如，你在学校时按部就班学了 C++ 和 Java，
找工作时却发现 PHP/Python 的职位最多
(这就是个例子，不要深究是不是真的这两个职位最多。
因为这显然要考虑地区和时期)。

也就是说，“学程序语言”和“用程序语言”是两件事。
这个事实决定了你在网上搜索“学编程”的信息时要特别留意作者的出发点。
实际上，正是因为大多数关于编程的建议都是针对找工作的(也即“用语言”这个目标)，
尤其是针对那些基础没打好、但觉得做软件来钱快的初学者。
适用于他们的建议几乎肯定不适用本文读者，
因为你们的孩子有足够充分的时间来打基础，
@racketoutput{合理规划、步步为营}，等到他们开始找工作时，
虽仍然还有各种困惑，但“用什么语言”一定不在其列。
他们有能力现学新语言。

具体来说，“先 Python 后 C++”花费的总时间
肯定多于“先 C++ 后 Python”。
因为，有 C++ 的基础，Python 可以不用学而直接使用。
反过来却不行。
这有点像，你考了手动挡驾驶证可以直接开自动挡的车；
但考过自动挡驾驶证还得额外训练手动挡，
虽然难度肯定比完全的新手低。
是的，现在确实很少人学手动挡了。
同理，只学 Python 或许也够用了。

那么，入门时同时学 C++ 和 Python 行不行呢？
行，但是不建议。因为中学正好也是孩子学业压力最重的时期，
同时学两门语言花费的总时间很可能更多。
如果条件允许，可以给孩子找个伴，
一人选一门语言，学内容相似的课程(这个很关键)，
课后多交流对比两门语言的差异。

最后，所有想帮助孩子规划编程学习路线的家长，这有两条建议：

@itemlist[
 @item{如果你能找到靠谱的老师，请主动持续跟老师交流，
  一段时间之后你或许能得到相对合理的建议，甚至能得到市场营销以外的路线。
  言下之意，你得认识自己和你的孩子，并且要让老师知道你们的想法和习惯，
  不要自己瞎猜。

  @racketoutput{在子女教育方面，请家长务必保持谦逊。}
  而且，人际关系是个复杂议题，“成年人的江湖经验”既是优势也是劣势。}
  
 @item{如果你找不到靠谱的老师(这才是正常现象)，那没有捷径，只能自己去学。
  我是说，你自己真的去学习编程，亲手敲代码，而不是“看”网上别人的观点，看不明白的。
  这么做的好处是，你可以跟孩子一起学，你自己本专业的知识或许就是孩子的“他山之石”；
  万一你学成了，你也多了一条收入途径。好多软件工程师的妻子就是这么入坑的。}]

@handbook-action[#:tag "cpp_vs_python"]{C++ 和 Python 的异同}

C++ 和 Python 都是程序语言，这是废话。
不废话的是，学计算机和编程并不是用语言来分界的，
这跟你选外语语种相当不同。

以下结论适用于所有程序语言(大概率也适用于母语和外语)：
@racketoutput{假设存在一门包罗万象的语言，
 那么所有具体的语言都只是这门语言的一个子集。
 于是，学编程的真正含义就是在学这个无所不包的程序语言，
 用它跟计算机交流，指导计算机完成你要求的任务。
 从某种意义上说，数学最接近这么一门包罗万象的语言。}
具体到 C++ 和 Python，它们都能达到与计算机交流的目的，
但是能力有差别，性能(办事效率)有差别，软件生态有差别，
因而入门难度、擅长领域、技能贬值速率也都有差别。

@handbook-event{语法}

语法比较尴尬，它既重要也不重要，主要是大多数人对它的理解都不在点上。

从功能和实用性角度来讲，语法方面的差异最不值一提，
用熟了都会内化成习惯。
就像日本人从来不嫌弃自己的母语有多笨拙。

但既然是语言，就不能只看功能需要，
还应该考虑可读性和精确性。
总体上说，Python 和 C++ 的语法在这两方面都不错。
Python 语法的简洁性比 C++ 更高，
但也更死板，甚至到了干扰你编码的程度，
是为矫枉过正。

因为语法直接跟人的偏好和品味有关，
不可能讨论出共识，因此不再继续展开。

@handbook-event{编译执行和解释执行}

这是应用程序的两种基本运行方式，
存在这两种运行方式的最直接的考量是运行效率。

如果将运行程序比作参加考试，
那么 Python 就是普通学生，
他们会规规矩矩地读题、思考、答题。
这是解释执行。
C++ 是学霸……吗？不是，
C++ 是擅长作弊的学生，
它们事先就已经知道题目了，
考试之前先做一遍背下答案，
拿到试卷之后不看题目、
照着空格直接填答案。
这是编译执行。
所以 C++ 程序跑得比 Python 程序快很多。

不过，Python 程序也可以先编译再运行。
因此，编译执行和解释执行并不是 C++ 快、Python 慢的唯一原因。
但是其他原因就不适合在这里解释了。
如果你对此感兴趣，那你应该先学 C++。

@handbook-event{内存管理与垃圾回收}

现在普通人能接触的计算机都遵循着那个叫做冯诺伊曼的人提出的“存储程序”思想。
也即，所有程序运行时，都要想办法把自己的代码和数据加载到内存中。

继续以考试作为类比，Python 考生这回开了外挂了，
他们用的草稿纸比较智能，答案誊到试卷中之后，
用过的草稿纸就自动整备好供你继续打草稿。
C++ 考生可就憋屈了，他们必须自己规划好
草稿区域，免得不同题目的草稿互相干扰。

内存管理是个相当复杂的主题，
除了上面比喻涉及的垃圾回收机制，
还有指针、引用等学 C++ 会碰到的难点概念。
这些大学生学都费劲。

这也是为什么我建议“先学 C++ 再学 Python”，
Python 并非没有这些东西，它们只是以另外的形式存在而已，
有时候并不能完全绕开，
这时没有C++基础就会很难理解。

@handbook-event{静态类型与动态类型}

数据类型是所有编程初学者都应该重点关注的概念，
因为@emph{类型决定人和机器如何解读数据}。
比如数字@racket[16]是当作年龄处理还是当作学号处理
(后者不应该参与算术运算)。

C++ 是静态类型语言，要求所有的变量都必须先声明类型；
Python 是动态类型语言，没有这个要求，因为在它看来所有的数据都是“东西”。

乍一看，你会觉得 Python 挺好，在减少初学者的学习负担。
实际上，动态类型正是导致 Python 性能低的另一个关键原因，
因为它每次操作数据时都要先问一遍“你符合我的要求吗？”。
关键是，即使 Python 不要求你这么做，
你自己的脑子里也得时时刻刻有这个意识。
否则，过段时间你肯定看不懂自己在写啥
(别人就更看不懂了)。

我推崇入门时选静态类型语言，
不只是养成个好的习惯问题。
@racketresultfont{用类型思考问题是初学者的必修课}，
也是软件能正常且正确运行的第一道保障。

顺带说一句，
C++ 的静态类型也只是比 Python 的强那么一丢丢，
用来入门培养类型思维是足够了。
将来你或许有机会研究更纯粹的类型论(这已经是一个趋势了)，
然后回过头来才能真正理解我这个观点的用心良苦。

其实，Python 也能声明类型，只是摆设意义更大一些，但也聊胜于无。
如果你学 Python，最好用起来，不要嫌麻烦。

@handbook-event{其他}

Python 还有两个优势， 一是入门年龄可以更小一些；
二是配置学习环境(安装必要的软件)要容易很多。
这些都是新手友好的标志。

不过这两个优势都算不上硬核，
本来最适合入门编程的年龄应该不低于12岁，
入门太早心智发育、考试科目的知识积累都不够，
算不上有多划算。

总之，关键是要老师靠谱(有系统和成熟的学科视野、最好有大型项目经历等)。
C++ 和 Python 的(其他)差异对于青少年来说没有那么大。
否则，先学哪个语言都是在浪费时间，不如把精力放在数理化上。

最后，计算机科学并不是数学的子集，
也并不是数理化学好了就能自动学会计算机。
我们一样有很多基础问题要独立研究。
比如， 如何设计一个支持量纲分析的类型系统。
物理学得好，但是没有程序语言理论的视野，
压根不会发现这里暗藏的问题，
但是很可能会发牢骚，“写单位换算代码太特么麻烦了”。
(这个问题，微软的F#语言已经有了一个聊胜于无的尝试)。

@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@handbook-reference[]
