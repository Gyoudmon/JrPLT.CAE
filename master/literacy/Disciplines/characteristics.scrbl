#lang scribble/manual

@(require "../literacy.rkt")

@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@handbook-root-story{课程特色}

@handbook-scenario{跨学科学习}

信息时代是学科交叉的时代，个体对世界的和身边的各种现象的理解门槛越来越高，
任何单个(单类)学科都无法覆盖个人发展的需要。
程序语言和计算机科学本身能打通文科、理科、工科、社科和商科等各个宇宙。

编程很简单，也很复杂。
对于中小学生来说，很难做到心无旁骛地撇开考试科目来学习计算机。
为打消学生和家长的顾虑，本系列课程在设计上不仅不会耽误学生考试，
还会潜移默化地帮助学生提高考试能力。
@emph{尤其对于数学、物理、写作(语文/英文)等科目的帮助更为直接}。

因此，本系列课程@racketerror{不只是单纯地培养又一种兴趣爱好}，
而是@emph{尽可能让学生实实在在地感受计算机和其他领域的联系和应用，
以应对扑朔迷离的智能时代}。

@handbook-scenario{思维训练优先于技能训练}

@emph{既然数学考试允许带计算器，为什么我们还要训练心算和笔算？}

@emph{既然搜索引擎和人工智能已经做到海量信息唾手可得，为什么我们还要学习？}

机器擅长的东西本来就是人类的弱项，
而机器擅长的东西本来也起源于人类求解问题的思路。

因此，本系列课程@racketerror{不只是纯技术训练}，
而更专注于核心竞争力的培养。
比如@emph{批判性思维，创造性思维、归纳总结能力}等
(这些也是现代考试科目应该达到的教学要求)，
@emph{数学学科特有的是推理证明能力}。

@handbook-scenario{问题导向式学习}

问题导向式学习是比较现代的教学方法，
也是现代教育的发展趋势，
但是尚未在学校教育中广泛开展
(因为学校教育的客观因素很难保证效果，比如学生数量太多)。

因此，本系列课程会充分发挥校外教育的优势：

@itemlist[
 #:style 'compact
 @item{小班制教学(每班平均4人，不超过6人，必要时一对一单独培养)}
 @item{学生主导项目(从团队合作到问题建模到完成成品到总结复盘)，教师引导并确保项目完成}
 @item{因地制宜、因材施教，数学角度、文学角度、工程技术角度，根据学生能力和偏好实施教学}
 @item{部分项目可与其它理科实验联动}
 @item{课程有配套的@racketoutput{原创源码库}，可提供给学生课后深入学习用}
 ]

不过，软件有其特殊性，其无形无体，即源于经验又独立于经验。
因此，(尤其是)在早期阶段，为加强对基本概念和理论的理解和记忆，
传统课堂的“先讲解后练习”的教学模式比例会适当提高
(其实更推荐学生课后自行复习巩固)。

课程结束时，除了能够积累一系列可见的软件作品外。
学生还能对自己的目标有更清晰的认识，
并能一定程度上像数学家/计算机科学家一样解决问题。
总之，孩子眼里的世界会从此变得不同。

@handbook-scenario{混合语言开班}

本系列课程原则上@emph{以知识、方法和思维训练为主，不强调语言和工具}。
因此，初期，学生可自选语言(C++/Python，其他)；
中后期，学生可根据自己的目标和教师建议，最终确定所学语言。

混合语言班天然具有对比性；
可弱化学生对语言的定势，有机会碰撞出比较有趣的讨论；
对目标感不够强的学生，也可以避免因选错语言而厌学。

@handbook-scenario{女生特别班}

女孩可与男孩混合组班，也可单独开班。

女孩@racketerror{并非天生不适合理工科}，
别被你们的母亲和其他(女性)任课老师误导了；
也不要被偏见和刻板印象耽误了潜力。

女孩在理工科领域有优势，
但确实也有很多独特的问题需要解决，
在学习过程中会加入对此类问题的探讨。

此外，学生家长可能会计较，
不希望自己女儿跟男孩一起上小班。

@;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@handbook-reference[]
