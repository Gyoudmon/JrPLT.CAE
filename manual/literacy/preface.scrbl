#lang scribble/manual

@(require "literacy.rkt")

@handbook-root-story{研课理念}

本手册的主要读者是青少年计算机科学课系列课程的所有教师，目前课程规划上覆盖 C++、Python 和 Scratch 三门语言。

青少年计算机科学课面向的学生群体是小学生和中学生，目的范围从培养个人兴趣到预备参加信息学奥赛，
因此在课程研发策略上讲究能够向下兼容的“自顶向下”设计。简单来说，单从课件和内容上看，
要能满足最高级学生的需要，而具体的教学实施由各教师根据自己的风格和学生特点来取舍，
授课内容不用面面俱到，但教师的知识储备不能成为学生升阶的天花板。

从学生接受能力的角度看，“自顶向下”设计的优势是，能与生活经验、已学知识建立连接、形成知识网络。
在教学实施过程中，教师应当注重引导学生发现生活经验中的计算思维。举个简单例子，对着墙壁抛出皮球，
球碰到墙壁会反弹。现用软件模拟这个过程，有 Scratch 经验的学生已经知道，只需拖动一个叫做“碰到边界反弹”
的积木到角色的代码区；那这个操作在 C++/Python 中也应该简化为一行代码：比如 @tt{set_border_strategy(BOUNCE)}。
学习 Scratch 的学生不关心“碰到边界反弹”的积木是怎么实现的，那他们在初学 C++/Python 时也不需要深究算法
如何判断边界、如何控制反弹。普通学生可以在后续课程中逐渐深入，学有余力的学生也可以自己研读配套的代码库。

这也是为什么我的课需要有配套的代码库的根本原因。互联网上成熟代码、游戏引擎太多了，但它们共同的问题是
“不是写给初学者看的”。任何让学生舒服的教学过程都离不开教师背后长期的无偿的付出，刚好我自己擅长这个，
而且我的代码库的质量也经过真实世界的检验。该套代码库再丰富丰富，就可以作为 Scratch 的替代品了，
去年公司就有计划做这个的，只是没人知道相关工作量是多少。

编程很简单，也很复杂。网上抄一段 @literal{"Hello, World!"} 容易，
但背后的设计思想却可能需要写几篇大作文来解释。
编程中的概念很抽象，即使是大学生也未必能一次就学会，一开始“听不懂”才是正常现象。
因此，教师必须要先帮助初学者建立好正确的心理预期。
这是教学实施方面的细节，教师应该自主探索最适合自己和学生的方法。

