# 场景：踢猫效应

# 自然语言描述：小孩很气愤，就用左脚踢了身边的猫
# 提取关键词：左脚 踢 猫 => 左 踢 猫
# 调整语序：踢 猫 左

# 定义函数：
def 踢(猫, 左):
    # 根据函数签名，还原自然语言描述
    # kick the cat with left foot
    print("用%s脚踢了%s" % (左, 猫))

# 调用函数：
踢('加菲猫', '左')
踢('波斯猫', '右')

# 古灵精怪：
踢('狗', '中')

# 发现问题，引出“类型”概念，
# 但 Python 无法直接解决此问题

###############################################################
# 提出异议，缺少主语。
# 1. 可以将主语信息以补语形式给出
def 踢(弱者, 脚, 谁):
    # 根据函数签名，还原自然语言描述
    print("%s用%s脚踢了%s, %s很气愤" % (谁, 脚, 弱者, 弱者))

# 2. 引出“对象”概念

# 定义类和方法
class Person(object):
    def __init__(self, name) -> None:
        self.name = name

    def 踢(self, 弱者, 脚):
        踢(弱者, 脚, self.name)

# 角色就绪
老板 = Person("老板")
老爸 = Person("老爸")
孩子 = Person("孩子")

# 完整还原情景
老板.踢(老爸.name, "左")
老爸.踢(孩子.name, "左")
孩子.踢("猫", "左")
